find.package("devtools")
find.package("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
libary(KernSmooth)
library(KernSmooth)
library(KernSmooth)
2+3
log(10)
?log
log(10, base=10)
1*2
1x2
1.2
c(1)*c(2)
?plot
c(1,2,3,4)+5
plot(c(1:10))
plot(c(1:10),log(c(1:10)))
plot(c(1:10),sin(c(1:10)))
plot(c(1:10),sin(c(1:10)), pch=20, col="navy")
faithful
faithful$waiting
hist(faithful$waiting)
hist(faithful$waiting, col=colors()[10:30])
hist(faithful$waiting, col=colors()[30:50])
hist(faithful$waiting, col=colors()[30:50])
demo
demo(graphics)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
hist(faithful$waiting, col=colors()[10:30])
hist(faithful$waiting, col=colors()[10:30])
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
faithful
log(100)
c(1,2,3,4)
c(1:4)
var <- 1+2
var <- c(1:10)
var
var + 4
2*var
var^2
source('C:/Users/nkruger/Downloads/1-Data.R')
a <- (1:4)
b <- (5:10)
union (a,8)
union (a,b)
union (a,b,8)
union (a,3)
sq(2)
source('~/Personal/R Course/MyFirstRScript.R')
source('~/Personal/R Course/MyFirstRScript.R')
source('~/Personal/R Course/MyFirstRScript.R')
source('~/Personal/R Course/MyFirstRScript.R')
economy <- mtcars$mpg
cylinders <- mtcars$cyl
mean(economy)
sd(economy)
stdEco <- sd(economy)
meanEco = mean(economy)
plot(eeconomy, cylinders)
plot(economy, cylinders)
primes
source('C:/Users/nkruger/Downloads/1-Data.R')
source('C:/Users/nkruger/Downloads/1-Data.R')
w <- c("orange","red","blue","green")
w[c(1:3)]
ainbow <- c("violet", "indigo", "blue", "green", "orange", "red")
rainbow <- c("violet", "indigo", "blue", "green", "orange", "red")
rainbow[7]
rainbow[-6]
rainbow + "yellow"
rainbow + c("yellow")
test <- c("yellow")
rainbow + test
rainbow[7] = 'yellow'
rainbow
boxplot(mtcars$wt,horizontal = TRUE)
sumWeights <- summy(mtcars$wt)
sumWeights <- summary(mtcars$wt)
sumWeights
1+2
library(swirl)
swirl()
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_date <- sample(c(y,z),100)
my_data <- sample(c(y,z),100)
is.na(my_date)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == is.na()
my_data == NA
sum(my_na)
print(my_data)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names()
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cv <- c("patient", "age", "weight","bp","rating","test")
c("patient", "age", "weight","bp","rating","test")
cnames <- c("patient", "age", "weight","bp","rating","test")
?colnames
colnames(cnames)
colnames(my_data) <- cnames
my_data
setwd("C:\Users\nkruger\Documents\GitHub\ProgrammingAssignment2")
setwd("C:\Users\nkruger\Documents\GitHub\")
?setwd
getwd()
setwd("C:/Users/nkruger/Documents/GitHub/")
getwd()
setwd("C:/Users/nkruger/Documents/GitHub/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?solve
x <- matrix(1:10, nrow = 4, ncol = 2)
x <- matrix(1:8, nrow = 4, ncol = 2)
x
solve(x)
x <- matrix(1:16, nrow = 4, ncol = 4)
x
solve(x)
m <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
solve(m)
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m<<NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(is.null(m)) {
message("Returning Cached Inverted Matrix")
return(m)
}
retInverted <- x$get()
m <- solve(retInverted)
x$setInverse(m)
m
}
x <- matrix(c(0, 2, 1, 0), nrow = 2, ncol = 2, byrow = TRUE)
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
y <- 1:10
cachemean(y)
m <- matrix(c(-1, -2, 1, 1), 2,2)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x1 <- cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(is.null(m)) {
message("Getting Cached Data")
return(m)
}
retInverted <- x$get()
m <- solve(retInverted)
x$setInverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x1 <- cacheSolve(x)
x1 <- cacheSolve(x)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x
x$get()
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##This function first checks if inverse of given matrix has been calculated
## if not then:
## a) it calculates the inverse of the matrix and caches the inverse
## else b) it returns the inverse from the cache
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting Cached Data")
return(m)
}
retInverted <- x$get()
m <- solve(retInverted)
x$setInverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
x1 <- cacheSolve(x)
x1 <- cacheSolve(x)
x1
View(x1)
print(x1)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<-NULL
}
get<- function() x
setInverse <- function(solve) m <<- solve
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
##This function first checks if inverse of matrix returned by makeCacheMatrix
##has been calculated. If not then:
## a) it calculates the inverse of the matrix and caches the inverse
## else b) it returns the inverse from the cache if matrix remained unchanged.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("Getting Cached Data")
return(m)
}
retInverted <- x$get()
m <- solve(retInverted)
x$setInverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
xInv <- cacheSolve(x) ##calculates inverse
mInv <- cacheSolve(x) ##calculates inverse
mInv <- cacheSolve(x) ##retrieves inverse from cache
print(mInv)
